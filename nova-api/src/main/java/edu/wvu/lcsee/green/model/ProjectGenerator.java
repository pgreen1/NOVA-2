package edu.wvu.lcsee.green.model;

import com.google.common.collect.ImmutableSet;
import edu.wvu.lcsee.green.model.spi.ScoringFunction;
import javax.annotation.Nonnegative;
import javax.annotation.Nonnull;

/**
 * A ProjectGenerator generate random {@link Project}s based upon a {@link Scenario}.
 * If {@link ScoringFunction}s are passed as well, {@link ScoredProject}s will be generated.
 * The projects generated by a ProjectGenerator can be used for simulations.
 * @author pdgreen
 */
public interface ProjectGenerator {

  /**
   * Generates a project based upon the given {@link Scenario}.
   * @param scenario the source Scenario
   * @return a project
   */
  @Nonnull
  Project generateProject(@Nonnull Scenario scenario);

  /**
   * Generates a project based upon the given {@link Scenario} and then
   * scores it using the given {@link ScoringFunction}s to generate a {@link ScoredProject}.
   * @param scenario the source Scenario
   * @return a scored project
   */
  @Nonnull
  ScoredProject generateScoredProject(@Nonnull Scenario scenario, @Nonnull ScoringFunction... scoringFunctions);

  /**
   * Generates an Iterable of projects based upon the given {@link Scenario}.
   * @param scenario the source Scenario
   * @param numberOfProjectsToCreate the number of projects to create
   * @return a set of projects
   */
  @Nonnull
  Iterable<Project> generateManyProjects(@Nonnull Scenario scenario,
          @Nonnegative int numberOfProjectsToCreate);

  /**
   * Generates a set of {@link ScoredProject}s based upon the given {@link Scenario}
   * and the given {@link ScoringFunction}s.
   * @param scenario the source Scenario
   * @param numberOfScoredProjectsToCreate the number of scored projects to create
   * @return a scored project
   */
  @Nonnull
  Iterable<ScoredProject> generateManyScoredProjects(@Nonnull Scenario scenario,
          @Nonnegative int numberOfScoredProjectsToCreate, @Nonnull ScoringFunction... scoringFunctions);
}
